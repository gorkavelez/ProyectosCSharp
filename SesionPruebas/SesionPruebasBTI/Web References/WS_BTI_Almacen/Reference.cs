//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace SesionPruebasBTI.WS_BTI_Almacen {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WS_BTI_ALMACEN_Binding", Namespace="urn:microsoft-dynamics-schemas/codeunit/WS_BTI_ALMACEN")]
    public partial class WS_BTI_ALMACEN : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AccPistolaOperationCompleted;
        
        private System.Threading.SendOrPostCallback IngenetRegistrarPickingOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WS_BTI_ALMACEN() {
            this.Url = global::SesionPruebasBTI.Properties.Settings.Default.SesionPruebasBTI_WS_BTI_Almacen_WS_BTI_ALMACEN;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AccPistolaCompletedEventHandler AccPistolaCompleted;
        
        /// <remarks/>
        public event IngenetRegistrarPickingCompletedEventHandler IngenetRegistrarPickingCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/WS_BTI_ALMACEN:AccPistola", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/WS_BTI_ALMACEN", ResponseElementName="AccPistola_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/WS_BTI_ALMACEN", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AccPistola(string usuario, string pass, ref string idioma, ref string nBD, ref string nEmp) {
            object[] results = this.Invoke("AccPistola", new object[] {
                        usuario,
                        pass,
                        idioma,
                        nBD,
                        nEmp});
            idioma = ((string)(results[0]));
            nBD = ((string)(results[1]));
            nEmp = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void AccPistolaAsync(string usuario, string pass, string idioma, string nBD, string nEmp) {
            this.AccPistolaAsync(usuario, pass, idioma, nBD, nEmp, null);
        }
        
        /// <remarks/>
        public void AccPistolaAsync(string usuario, string pass, string idioma, string nBD, string nEmp, object userState) {
            if ((this.AccPistolaOperationCompleted == null)) {
                this.AccPistolaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAccPistolaOperationCompleted);
            }
            this.InvokeAsync("AccPistola", new object[] {
                        usuario,
                        pass,
                        idioma,
                        nBD,
                        nEmp}, this.AccPistolaOperationCompleted, userState);
        }
        
        private void OnAccPistolaOperationCompleted(object arg) {
            if ((this.AccPistolaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AccPistolaCompleted(this, new AccPistolaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/WS_BTI_ALMACEN:IngenetRegistrarPicking", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/WS_BTI_ALMACEN", ResponseElementName="IngenetRegistrarPicking_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/WS_BTI_ALMACEN", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void IngenetRegistrarPicking(string nPicking) {
            this.Invoke("IngenetRegistrarPicking", new object[] {
                        nPicking});
        }
        
        /// <remarks/>
        public void IngenetRegistrarPickingAsync(string nPicking) {
            this.IngenetRegistrarPickingAsync(nPicking, null);
        }
        
        /// <remarks/>
        public void IngenetRegistrarPickingAsync(string nPicking, object userState) {
            if ((this.IngenetRegistrarPickingOperationCompleted == null)) {
                this.IngenetRegistrarPickingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIngenetRegistrarPickingOperationCompleted);
            }
            this.InvokeAsync("IngenetRegistrarPicking", new object[] {
                        nPicking}, this.IngenetRegistrarPickingOperationCompleted, userState);
        }
        
        private void OnIngenetRegistrarPickingOperationCompleted(object arg) {
            if ((this.IngenetRegistrarPickingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IngenetRegistrarPickingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AccPistolaCompletedEventHandler(object sender, AccPistolaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AccPistolaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AccPistolaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string idioma {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string nBD {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string nEmp {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void IngenetRegistrarPickingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591